name: Test ECS Scaler

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  test-ecs-scaler:
    name: Test ECS Scaler with Real AWS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy test infrastructure
      run: |
        echo "Deploying test infrastructure..."
        npx serverless deploy --config test-deployment.yml --verbose
        
    - name: Wait for infrastructure to be ready
      run: |
        echo "Waiting for ECS cluster and service to be ready..."
        sleep 60
        
    - name: Run automated tests
      run: |
        echo "Running comprehensive ECS scaler tests..."
        python automated-test.py
        
    - name: Cleanup test infrastructure
      if: always()
      run: |
        echo "Cleaning up test infrastructure..."
        npx serverless remove --config test-deployment.yml --verbose
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          *.log
          test-results/
          
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let testOutput = 'Test completed';
          
          try {
            if (fs.existsSync('automated-test.py.log')) {
              testOutput = fs.readFileSync('automated-test.py.log', 'utf8');
            }
          } catch (error) {
            console.log('Could not read test log');
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ§ª ECS Scaler Test Results
            
            **Status**: âœ… Tests completed
            
            <details>
            <summary>Test Output</summary>
            
            \`\`\`
            ${testOutput}
            \`\`\`
            
            </details>
            
            The ECS scaler has been tested with real AWS services and is ready for use! ðŸš€`
          });
